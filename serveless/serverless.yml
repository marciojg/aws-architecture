
service: api-gateway-and-lambdas

provider:
  name: aws
  runtime: python3.8
  region: 'us-east-1'
  memorySize: 128
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'sns:*'
      Resource:
        - 'arn:aws:sns:us-east-1:644689573437:sns-1-topic'
        # -  '<ARN-SNS-AQUI>'
    - Effect: 'Allow'
      Action:
        - 'sqs:*'
      Resource:
        -  'arn:aws:sqs:us-east-1:644689573437:sqs-1-queue'
        # -  '<ARN-SQS-AQUI>'

package:
  exclude:
    - node_modules/*
    - ./node_modules/**
    - layer/**
    - schemas/*
    
layers:
  LayerDependencies:
    path: layer
    description: "learning layers"


functions:
  book-create:
    handler: book_create.handler
    name: lambda1-book-create
    
    events:
      - http:
          path: /book/create
          method: post
          cors: true
          request:
            schema:
              application/json: ${file(schemas/book-create-schema-request.json)}
              
    layers:
      - {Ref: LayerDependenciesLambdaLayer}

    environment:
      # snsArn: '<ARN-SNS-AQUI>'
      snsArn: 'arn:aws:sns:us-east-1:644689573437:sns-1-topic'
              
  sell-book:
    handler: sell_book.handler
    name: lambda2-sell-book
    
    events:
      - http:
          path: /sell/book
          method: post
          cors: true
          request:
            schema:
              application/json: ${file(schemas/sell-book-schema-request.json)}
              
    layers:
      - {Ref: LayerDependenciesLambdaLayer}

    environment:
      # snsArn: '<ARN-SNS-AQUI>'
      snsArn: 'arn:aws:sns:us-east-1:644689573437:sns-1-topic'
      
  sqs-to-s3:
    handler: sqs_to_s3.handler
    name: lambda3-sqs-to-s3
    
    events:
      - sqs:
          # arn: '<ARN-SQS-AQUI>'
          arn: 'arn:aws:sqs:us-east-1:644689573437:sqs-1-queue'
          batchSize: 1
          
    layers:
      - {Ref: LayerDependenciesLambdaLayer}

    # environment:
      # sqsArn: 'arn:aws:sns:us-east-1:644689573437:sqs-1-queue'
      # sqsArn: '<ARN-SQS-AQUI>'